This query returns first-level nodes which are probably the centers of the stations. 
The ways are likely the area areas, which have around a dozend of nodes with resolving_missing=True
No relation is returned.

	[out:json][timeout:600];
	area[name="Melbourne"]->.a;
	(
	node["railway"="station"](area.a);
	way["railway"="station"](area.a);
	relation["railway"="station"](area.a);
	);
	out center;
	out tags;

Serializing the result for Luxembourg rail ways returns tons of tags which are not interesting for our purpose. The nodes within the ways were bypassed due to long waiting time. Maybe removing tags info but use resolve_missage for way.get_nodes() makes more sense.
No, not really. way.get_nodes resolve_missing definitely takes too long. 
Next try: resolves the way.nodes one by one and output each way immediately instead of list comprehension which probably force the server to resolve nodes of all ways in one go!

to insert line break before each occurrence of ", {'id'" do:  sed -e "s/, {'id'/, {'id'/g" input_file ; Note that the open curly bracket does not need escaping.  

2024.12.14:
	I merged the nodes of all Luxembourg ways matching the filters ["railway"="rail"] ["name"="Ligne Luxembourg - Oetrange" into one LineString. there were 18 matching ways. The result on the map looks pretty crappy. Certainly the nodes cannot simply be concatinated as the the line criss-crosses. 

2024.12.27:
	This query still gets around 1k of nodes:
	[out:json][timeout:600];
area[name="Melbourne"]->.a;

(
  node["railway"="station"][ "network" = "PTV - Metropolitan Trains"
](area.a);
  way["railway"="station"](area.a);
  relation["railway"="station"](area.a);
);

out body;
out tags;

2024.12.28:
	Tags have keys which can be structured in hierachy. For we can filter to elements starting with the "name", but we can also filter to "name:pjt" which means tags , which will also match filter on "name"
	We omit the value in the filter if we are interested in all tags with a matching keyword, regardless of the value. 

2024.12.29:
	It seems that the first part of a query can optionally include the output format specs. The area or bounding box follows as part of the first part, which concludes with a semicolon. That means, the statement whichs specifies the output format cannot end with semicolon since it is not the end of part 1. 
	Part 1 can be a bounding box notated as [bbox: 2 pairs of coordinates]
	The second part contains the filters, each statements must be end with a semicolon. 
	When a (result) set contains a single way, the statement 
		(._;>;);
	will include all the way and the nodes of the way. Yet to be tested if the nodes are in adjacent order, i.e. form a line nicely. 
	In my test, the nodes of the way were output first, then the way itself and the node ids. "._" denotes the default set, and ">" is the recurse command to find nodes of the way. The round brackets denote the union of two sets. 

